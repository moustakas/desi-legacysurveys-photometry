#!/usr/bin/env python

"""Validate the files generated by lsdr9-photometry

/global/homes/i/ioannis/code/desihub/desi-photometry/validate-files -o /global/cscratch1/sd/ioannis/photocatalog/fuji --specprod fuji --statistics --validate
/global/homes/i/ioannis/code/desihub/desi-photometry/validate-files -o /global/cscratch1/sd/ioannis/photocatalog/guadalupe --specprod guadalupe --statistics --validate

"""
import os, argparse, pdb
from glob import glob
import numpy as np
import fitsio
import multiprocessing

from astropy.table import Table

def _targets_one_tile(args):
    """Multiprocessing wrapper."""
    return targets_one_tile(*args) 

def targets_one_tile(tileid, obstile, pottile):
    """Check one file.

    """
    print('  Checking tile {}'.format(tileid))
    # Check that the set of targetids are unique.
    assert(len(obstile) == len(np.unique(obstile['TARGETID'])))
    assert(len(pottile) == len(np.unique(pottile['TARGETID'])))
    
    # Check that every target in the targetphot file is also in the
    # targetphot-potential file.
    K = np.isin(obstile['TARGETID'], pottile['TARGETID'], assume_unique=True)
    assert(len(K) == len(obstile['TARGETID']))

    # Now, ensure that the data stored in the potential and observed catalogs
    # *for the same objects* are identical.
    I = np.isin(pottile['TARGETID'], obstile['TARGETID'], assume_unique=True)
    pot = pottile[I]
    for col in pot.colnames:
        diff = pot[col] != obstile[col]
        if np.any(diff):
            J = ~np.isnan(obstile[col][diff]) # need to check nan separately
            if np.sum(J) > 0:
                print(col, pot[col][diff][J], obstile[col][diff][J])

def fileinfo(filelist, specprod):

    dsurvey = {'cmx': 'Commissioning Survey', 'special': 'Special targets',
               'sv1': 'Survey Validation 1', 'sv2': 'Survey Validation 2',
               'sv3': 'Survey Validation 3', 'main': 'Main Survey',
               '{}.fits'.format(specprod): 'Stack of the preceding XX catalogs.'}

    nrows, szs = [], []
    for onefile in filelist:
        szs.append(os.stat(onefile).st_size)
        nrows.append(fitsio.FITS(onefile)[1].get_nrows())
    szs = np.array(szs)
    nrows = np.array(nrows)

    #srt = np.argsort(nrows)
    srt = np.arange(len(nrows))

    print('| File Name | File Size | Number of Targets | Notes |')
    print('|-----------|:---------:|:-----------------:|-------|')
    for onefile, nrow, sz in zip(filelist[srt], nrows[srt], szs[srt]):
        if sz > 1024**2 and sz < 1024**3:
            sz /= 1024**2
            unit = 'MB'
            fmt = ''
        else:
            sz /= 1024**3
            unit = 'GB'

        basefile = os.path.basename(onefile)
        survey = basefile.split('-')[1]
        if survey == 'potential':
            survey = basefile.split('-')[2]
        notes = dsurvey[survey].replace('XX', str(len(filelist)-1))
            
        print('| {} | {:,d} | {:.3g} {} | {} |'.format(basefile, nrow, sz, unit, notes))

def main():

    p = argparse.ArgumentParser()
    p.add_argument('-o', '--outdir', type=str, required=True, help='output directory file')    
    p.add_argument('--specprod', type=str, required=True, help='output file prefix')
    p.add_argument('--mp', type=int, default=1, help='number of multiprocessing cores')
    p.add_argument('--statistics', action='store_true', help='Do file statistics.')
    p.add_argument('--validate', action='store_true', help='Validate the files.')
    
    args = p.parse_args()

    if args.specprod == 'fuji':
        surveys = ['cmx', 'special', 'sv1', 'sv2', 'sv3']
    elif args.specprod == 'guadalupe':
        surveys = ['special', 'main']

    # Do statistics.
    if args.statistics:
        # tractorphot files
        for targtype, targsuffix in zip(['observed', 'potential'], ['', '-potential']):
            print('tractorphot - {} targets'.format(targtype))
            filelist = glob(os.path.join(args.outdir, '{}-targets'.format(targtype), 'tractorphot', 
                                         'tractorphot{}-nside4-hp???-{}.fits'.format(targsuffix, args.specprod)))
            nfiles = len(filelist)
            sz, nobj = [], []
            for onefile in filelist:
                sz.append(os.stat(onefile).st_size)
                nobj.append(fitsio.FITS(onefile)[1].get_nrows())
            sz = np.sum(sz)
            nobj = np.sum(nobj)
            if sz > 1024**2 and sz < 1024**3:
                sz /= 1024**2
                unit = 'MB'
                fmt = ''
            else:
                sz /= 1024**3
                unit = 'GB'
            print('| Data Release | Relative Location of *tractorphot* Files | Number of Files | Total Data Volume | Total Number of Objects |')
            print('|--------------|------------------------------------------|:---------------:|:-----------------:|:-----------------------:|')
            print('| {} | {}-targets/tractorphot/tractorphot{}-nside4-hp[0-9][0-9][0-9]-{}.fits | {} | {:.3g} {} | {:,d} |'.format(
                args.specprod, targtype, targsuffix, args.specprod, nfiles, sz, unit, nobj))
            print()
            
        # targetphot files
        for targtype, targsuffix in zip(['observed', 'potential'], ['', '-potential']):
            print('targetphot - {} targets'.format(targtype))
            if args.specprod == 'fuji' or args.specprod == 'guadalupe':
                filelist = []
                for survey in surveys:
                    filelist.append(os.path.join(args.outdir, '{}-targets'.format(targtype),
                                                 'targetphot{}-{}-{}.fits'.format(targsuffix, survey, args.specprod)))
                filelist.append(os.path.join(args.outdir, '{}-targets'.format(targtype),
                                             'targetphot{}-{}.fits'.format(targsuffix, args.specprod)))
            else:
                filelist = glob(os.path.join(args.outdir, '{}-targets'.format(targtype),
                                             'targetphot{}-*{}.fits'.format(targsuffix, args.specprod)))
            filelist = np.array(filelist)
            fileinfo(filelist, args.specprod)
            print()
        
    # Validate files.
    if args.validate:
        for survey in surveys:
            print('Working on survey {}'.format(survey))
            obsfile = os.path.join(args.outdir, 'observed-targets', 'targetphot-{}-{}.fits'.format(survey, args.specprod))
            potfile = os.path.join(args.outdir, 'potential-targets', 'targetphot-potential-{}-{}.fits'.format(survey, args.specprod))
            obs = Table(fitsio.read(obsfile))
            print('Read {:,d} objects from {}'.format(len(obs), obsfile))
            pot = Table(fitsio.read(potfile))
            print('Read {:,d} objects from {}'.format(len(pot), potfile))

            tileids = sorted(set(obs['TILEID']))
            print('Processing {} unique tiles'.format(len(tileids)))
            
            # Multiprocess over tiles
            mpargs = [[tileid, obs[obs['TILEID'] == tileid], pot[pot['TILEID'] == tileid]] for tileid in tileids]
                
            if args.mp > 1:
                with multiprocessing.Pool(args.mp) as P:
                    P.map(_targets_one_tile, mpargs)
            else:
                [targets_one_tile(*mparg) for mparg in mpargs]
        print()
            
if __name__ == '__main__':
    main()
