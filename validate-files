#!/usr/bin/env python

"""Validate the files generated by lsdr9-photometry

/global/homes/i/ioannis/code/desihub/desi-photometry/validate-files -o /global/cscratch1/sd/ioannis/photocatalog/fuji --outsuffix fuji --statistics

"""
import os, argparse, pdb
from glob import glob
import numpy as np
import fitsio
import multiprocessing

from astropy.table import Table

from desiutil.log import get_logger, DEBUG
log = get_logger()

def _check_one_file(args):
    """Multiprocessing wrapper."""
    return check_one_file(*args) 

def check_one_file(observed, potential):
    """Check one file.

    """
    pdb.set_trace()
    return cat

def fileinfo(filelist, outsuffix):

    dsurvey = {'cmx': 'Commissioning Survey', 'special': 'Special targets',
               'sv1': 'Survey Validation 1', 'sv2': 'Survey Validation 2',
               'sv3': 'Survey Validation 3', 'main': 'Main Survey',
               '{}.fits'.format(outsuffix): 'Stack of the preceding XX catalogs.'}

    nrows, szs = [], []
    for onefile in filelist:
        szs.append(os.stat(onefile).st_size)
        nrows.append(fitsio.FITS(onefile)[1].get_nrows())
    szs = np.array(szs)
    nrows = np.array(nrows)

    #srt = np.argsort(nrows)
    srt = np.arange(len(nrows))

    print('| File Name | File Size | Number of Targets | Notes |')
    print('|-----------|:---------:|:-----------------:|-------|')
    for onefile, nrow, sz in zip(filelist[srt], nrows[srt], szs[srt]):
        if sz > 1024**2 and sz < 1024**3:
            sz /= 1024**2
            unit = 'MB'
            fmt = ''
        else:
            sz /= 1024**3
            unit = 'GB'

        basefile = os.path.basename(onefile)
        survey = basefile.split('-')[1]
        notes = dsurvey[survey].replace('XX', str(len(filelist)-1))
            
        print('| {} | {:,d} | {:.3g} {} | {} |'.format(basefile, nrow, sz, unit, notes))

def main():

    p = argparse.ArgumentParser()
    p.add_argument('-o', '--outdir', type=str, required=True, help='output directory file')    
    p.add_argument('--outsuffix', type=str, required=True, help='output file prefix')
    p.add_argument('--statistics', action='store_true', help='Do file statistics.')
    p.add_argument('--validate', action='store_true', help='Validate the files.')
    
    args = p.parse_args()
    log = get_logger()

    # Do statistics.
    if args.statistics:
        log.info('Observed targets:')
        if args.outsuffix == 'fuji' or args.outsuffix == 'guadalupe':
            if args.outsuffix == 'fuji':
                surveys = ['cmx', 'special', 'sv1', 'sv2', 'sv3']
            elif args.outsuffix == 'guadalupe':
                surveys = ['special', 'main']
            filelist = []
            for survey in surveys:
                filelist.append(os.path.join(args.outdir, 'observed-targets', 'targetphot-{}-{}.fits'.format(survey, args.outsuffix)))
            filelist.append(os.path.join(args.outdir, 'observed-targets', 'targetphot-{}.fits'.format(args.outsuffix)))
        else:
            filelist = glob(os.path.join(args.outdir, 'observed-targets', 'targetphot-*{}.fits'.format(args.outsuffix)))
        filelist = np.array(filelist)
        fileinfo(filelist, args.outsuffix)
            
    # Validate files.
    if args.validate:
        pass
        
        #tileids = np.unique(parent_zcat['TILEID'])
        _, uindx = np.unique(parent_zcat['TILEID'], return_index=True)
        tileids = parent_zcat['TILEID'][uindx]
        surveys = parent_zcat['SURVEY'][uindx]
        programs = parent_zcat['PROGRAM'][uindx]

        # Multiprocess over tiles
        #log.info('Dividing the sample into {} unique tiles.'.format(len(tileids)))
        mpargs = [[tileid, survey, program] for tileid, survey, program in zip(tileids, surveys, programs)]
                
        if args.mp > 1:
            with multiprocessing.Pool(args.mp) as P:
                zcat = P.map(_read_one_potential_targets, mpargs)
        else:
            zcat = [read_one_potential_targets(*mparg) for mparg in mpargs]
        zcat = vstack(zcat)
            
if __name__ == '__main__':
    main()
